Identify exactly three aspects in Section 1 and Section 2 that represent either strengths or weaknesses
(e.g., 1 strength and 2 weaknesses, or 3 weakness, etc.). Support each identified aspect with proper arguments
(one or two sentences) motivating your selection:

-> Weakness: the set of goals does not clarify the effective purpose(s) of the application (or, in other words, the benefits the application will give to the world). Moreover, "G1" and "G2" correspond to the same high-level purpose: students can compete in tournaments with the code kata approach". "G3" is a correct goal in our opinion, however we preferred an higher level of abstraction (e.g. more related to the didactic aspect on the platform);
-> Strength 1: the phenomena set result complete and properly divided, system boundaries are well defined. However, there is no section about the "Machine only phenomena";
-> Strength 2: scenarios are explained in an appropriate language and with a proper level of abstraction (e.g. they do not fail in proposing solutions). There are some cases where a scenario tries to generalize itself (e.g. "Users can see current rank") but we think that the overall view is well defined;

Identify exactly three aspects in Section 3 that represent either strengths or weaknesses
(e.g., 1 strength and 2 weaknesses, or 3 weakness, etc.). Support each identified aspect with proper arguments
(one or two sentences) motivating your selection:

-> Weakness 1: there are subsections where the application is assumed to be a web app. We understand the advantages that this solution may give, but highlighting solutions is not the purpose of the RASD, we expected to read an explanation of the reasons why the application should have been, for example, portable as much as possible, instead of presenting a solution (there are other alternatives indeed). At the end, we consider it an huge weakness;
-> Weakness 2: although requirements and domain assumptions are generally well written, there are some that are not bound with the proper goal (e.g. "R11" with "G1"). Moreover, due to the fact that goals are (in our opinion) too much detailed, it happens what we would call a "funnel" effect: "R and DâŠ§G" can't be ensured because "R and D" defines a greater set of possibilities that the set covered by "G";
-> Strength: UML diagrams and use-cases are, in our opinion, well written and complete of any (relevant) information. We did not find relevant ambiguities or contradictions. The language is also appropriate to a RASD. We also want to mention that we appreciated how the UI section was developed, by highlighting the relevant aspects of the interface (from a requirements and specification point of view) and omitting any aspect that could have been resulted in an implicit design constraint;

Identify exactly three aspects in Section 4 that represent either strengths or weaknesses
(e.g., 1 strength and 2 weaknesses, or 3 weakness, etc.). Support each identified aspect with proper arguments (one or two sentences) motivating your selection:

-> Weakness 1: the formal analysis is focused only on the ranking evaluation, other aspects such as badge management, deadlines and other constraints related to group structure are not considered (however, groups are correctly built to avoid overlaps in the same battle). Although it was specified that the formal analysis would not have covered aspects outside the ranking evaluation, we consider the lack of almost any other formal verification an huge weakness of the section;
-> Weakness 2: although the ranking possibilities have been carefully analyzed (by also including the ties aspect) the ranking itself is not modeled. We would have preferred to have a visualization of the ranking directly in Alloy;
-> Strength: the Alloy model does not contradict the requirements (in the context of the rankings). For example, the fact that a student can't join more groups for the same battle, it's correctly described and shown by means of the predicate "cannotEnrollTwiceInABattle".